generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  username      String   @unique
  email         String   @unique
  password      String   
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  gamesAsWhite  Game[]   @relation("WhitePlayer")
  gamesAsBlack  Game[]   @relation("BlackPlayer")

  Move Move[]

  Notification Notification[]
}

model Game {
  id         String   @id @default(cuid())
  whiteId    String?  
  blackId    String?  
  white      User?    @relation("WhitePlayer", fields: [whiteId], references: [id])
  black      User?    @relation("BlackPlayer", fields: [blackId], references: [id])
  moves      Move[]
  state      String   @default("pending") // e.g., "pending", "in_progress", "completed"
  result     String?  // e.g., "white_win", "black_win", "draw"
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}


model Move {
  id        String   @id @default(cuid())
  gameId    String
  game      Game     @relation(fields: [gameId], references: [id])
  playerId  String  
  player    User     @relation(fields: [playerId], references: [id])
  notation  String   // Algebraic notation of the move (e.g., "e2e4")
  moveOrder Int      
  createdAt DateTime @default(now())
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}
